name: Rebuild Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_rebuild:
        description: 'Digite "REBUILD" para confirmar a recriação da infraestrutura'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.7.0

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore ./src/FiapFastFoodAutenticacao/FiapFastFoodAutenticacao.csproj

    - name: Build
      run: dotnet build ./src/FiapFastFoodAutenticacao/FiapFastFoodAutenticacao.csproj --configuration Release --no-restore

    - name: Publish
      run: dotnet publish ./src/FiapFastFoodAutenticacao/FiapFastFoodAutenticacao.csproj --configuration Release --output ./publish --no-build -p:PublishReadyToRun=false

    - name: Create deployment package
      run: |
        cd publish
        zip -r ../package.zip .
        cd ..

    - name: Upload package
      uses: actions/upload-artifact@v4
      with:
        name: lambda-package
        path: package.zip

  rebuild:
    needs: build
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_rebuild == 'REBUILD'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download package
      uses: actions/download-artifact@v4
      with:
        name: lambda-package
        path: .

    - name: Verify AWS secrets
      run: |
        echo "Checking AWS secrets..."
        if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
          echo "❌ AWS_ACCESS_KEY_ID is empty"
          exit 1
        fi
        if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
          echo "❌ AWS_SECRET_ACCESS_KEY is empty"
          exit 1
        fi
        if [ -z "${{ secrets.AWS_SESSION_TOKEN }}" ]; then
          echo "❌ AWS_SESSION_TOKEN is empty"
          exit 1
        fi
        echo "✅ All AWS secrets are configured"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Clean previous state
      run: |
        cd infra/terraform
        rm -rf .terraform/
        rm -f .terraform.lock.hcl
        rm -f terraform.tfstate*
        echo "🧹 Estado anterior limpo"

    - name: Terraform Init
      run: |
        cd infra/terraform
        terraform init

    - name: Terraform Plan
      run: |
        cd infra/terraform
        terraform plan \
          -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
          -var="jwt_issuer=${{ secrets.JWT_ISSUER }}" \
          -var="jwt_audience=${{ secrets.JWT_AUDIENCE }}"

    - name: Terraform Apply
      run: |
        cd infra/terraform
        echo "🚀 Criando nova infraestrutura..."
        terraform apply -auto-approve \
          -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
          -var="jwt_issuer=${{ secrets.JWT_ISSUER }}" \
          -var="jwt_audience=${{ secrets.JWT_AUDIENCE }}"

    - name: Get API Gateway URL
      id: get-url
      run: |
        cd infra/terraform
        API_URL=$(terraform output -raw api_gateway_url)
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT
        echo "🚀 Nova API criada em: $API_URL"

    - name: Verify new infrastructure
      run: |
        echo "🔍 Verificando nova infraestrutura..."
        aws lambda get-function --function-name FiapFastFoodAutenticacao --query 'Configuration.State' --output text
        aws apigateway get-rest-apis --query 'items[?name==`FiapFastFoodAutenticacao-api`]' --output table

    - name: Test endpoints
      run: |
        API_URL="${{ steps.get-url.outputs.api_url }}"
        echo "🧪 Testando endpoints..."
        echo "API URL: $API_URL"
        
        # Teste básico
        curl -s -o /dev/null -w "%{http_code}" "$API_URL/" || echo "Teste básico falhou"
        
        echo ""
        echo "📋 Endpoints disponíveis:"
        echo "- POST $API_URL/customer/identify"
        echo "- POST $API_URL/customer/register"
        echo "- POST $API_URL/customer/register-anonymous"
        echo "- POST $API_URL/admin/login"

    - name: Rebuild Summary
      run: |
        echo "🎯 RECRIAÇÃO CONCLUÍDA"
        echo "=================================="
        echo "✅ Lambda Function: CRIADA"
        echo "✅ API Gateway: CRIADO"
        echo "✅ Permissões IAM: CRIADAS"
        echo "✅ Estado Terraform: INICIALIZADO"
        echo ""
        echo "🌐 Nova API URL: ${{ steps.get-url.outputs.api_url }}"
        echo "🚀 Infraestrutura pronta para uso!"
