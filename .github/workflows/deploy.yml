name: Deploy to AWS

on:
  push:
    branches: [ main ]
    paths:
      - 'infra/**'
      - 'src/**'
      - '.github/workflows/deploy.yml'
      - 'build.ps1'
      - 'build.sh'
  pull_request:
    branches: [ main ]
    paths:
      - 'infra/**'
      - 'src/**'
      - '.github/workflows/deploy.yml'
      - 'build.ps1'
      - 'build.sh'
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
        type: string

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.7.0

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Build and package Lambdas
      run: |
        chmod +x ./build.sh
        ./build.sh

    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: lambda-packages
        path: |
          admin-package.zip
          customer-package.zip

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') || 
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && github.event.action != 'closed')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: lambda-packages
        path: .

    - name: Verify AWS secrets
      run: |
        echo "Checking AWS secrets..."
        echo "AWS_ACCESS_KEY_ID length: ${#AWS_ACCESS_KEY_ID}"
        echo "AWS_SECRET_ACCESS_KEY length: ${#AWS_SECRET_ACCESS_KEY}"
        echo "AWS_SESSION_TOKEN length: ${#AWS_SESSION_TOKEN}"
        
        if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
          echo "‚ùå AWS_ACCESS_KEY_ID is empty"
          exit 1
        fi
        if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
          echo "‚ùå AWS_SECRET_ACCESS_KEY is empty"
          exit 1
        fi
        if [ -z "${{ secrets.AWS_SESSION_TOKEN }}" ]; then
          echo "‚ùå AWS_SESSION_TOKEN is empty"
          exit 1
        fi
        echo "‚úÖ All AWS secrets are configured"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      run: |
        cd infra/terraform
        terraform init
        
        # Verificar se o init foi bem-sucedido
        if [ $? -eq 0 ]; then
          echo "‚úÖ Terraform init completed successfully"
        else
          echo "‚ùå Terraform init failed"
          exit 1
        fi

    - name: Force Lambda recreation for VPC config
      run: |
        cd infra/terraform
        echo "Forcing Lambda recreation to apply VPC configuration"
        echo "LAMBDA_EXISTS=false" >> $GITHUB_ENV

    - name: Set connection string
      run: |
        # Prioriza DB_CONNECTION_STRING, fallback para RDS_CONNECTION_STRING
        if [ "${{ secrets.DB_CONNECTION_STRING }}" != "" ]; then
          echo "CONNECTION_STRING=${{ secrets.DB_CONNECTION_STRING }}" >> $GITHUB_ENV
          echo "‚úÖ Using DB_CONNECTION_STRING secret"
        else
          echo "CONNECTION_STRING=${{ secrets.RDS_CONNECTION_STRING }}" >> $GITHUB_ENV
          echo "‚úÖ Using RDS_CONNECTION_STRING secret"
        fi

    - name: Terraform Plan
      run: |
        cd infra/terraform
        terraform plan \
          -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
          -var="jwt_issuer=${{ secrets.JWT_ISSUER }}" \
          -var="jwt_audience=${{ secrets.JWT_AUDIENCE }}" \
          -var="jwt_customer_secret=${{ secrets.JWT_CUSTOMER_SECRET }}" \
          -var="jwt_customer_issuer=${{ secrets.JWT_CUSTOMER_ISSUER }}" \
          -var="jwt_customer_audience=${{ secrets.JWT_CUSTOMER_AUDIENCE }}" \
          -var="aws_region=${{ vars.AWS_REGION }}" \
          -var="admin_password_permanent=${{ secrets.TF_VAR_admin_password_permanent }}" \
          -var="create_lambda=${{ env.LAMBDA_EXISTS == 'false' }}" \
          -var="shared_sg_name=${{ vars.SHARED_SG_NAME || 'eks-shared-to-rds' }}" \
          -var="rds_connection_string=${{ env.CONNECTION_STRING }}"

    - name: Terraform Apply
      run: |
        cd infra/terraform
        terraform apply -auto-approve \
          -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
          -var="jwt_issuer=${{ secrets.JWT_ISSUER }}" \
          -var="jwt_audience=${{ secrets.JWT_AUDIENCE }}" \
          -var="jwt_customer_secret=${{ secrets.JWT_CUSTOMER_SECRET }}" \
          -var="jwt_customer_issuer=${{ secrets.JWT_CUSTOMER_ISSUER }}" \
          -var="jwt_customer_audience=${{ secrets.JWT_CUSTOMER_AUDIENCE }}" \
          -var="aws_region=${{ vars.AWS_REGION }}" \
          -var="admin_password_permanent=${{ secrets.TF_VAR_admin_password_permanent }}" \
          -var="create_lambda=${{ env.LAMBDA_EXISTS == 'false' }}" \
          -var="shared_sg_name=${{ vars.SHARED_SG_NAME || 'eks-shared-to-rds' }}" \
          -var="rds_connection_string=${{ env.CONNECTION_STRING }}"
        
        # Verificar se o apply foi bem-sucedido
        if [ $? -eq 0 ]; then
          echo "‚úÖ Terraform apply completed successfully"
        else
          echo "‚ùå Terraform apply failed"
          exit 1
        fi

    - name: List Terraform outputs
      run: |
        cd infra/terraform
        echo "Available Terraform outputs:"
        terraform output
        
        # Verificar se h√° outputs dispon√≠veis
        if [ $? -eq 0 ]; then
          echo "‚úÖ Terraform outputs are available"
        else
          echo "‚ùå No Terraform outputs found"
          exit 1
        fi

    - name: Get API Gateway URL
      id: get-url
      run: |
        cd infra/terraform
        # Verificar se o output existe antes de tentar acess√°-lo
        if terraform output -json | jq -e '.http_api_gateway_url' > /dev/null 2>&1; then
          API_URL=$(terraform output -raw http_api_gateway_url)
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "üöÄ API deployed at: $API_URL"
        else
          echo "‚ùå Output 'http_api_gateway_url' not found in Terraform state"
          echo "Available outputs:"
          terraform output
          echo "Trying to get output without jq..."
          # Fallback sem jq
          API_URL=$(terraform output -raw http_api_gateway_url 2>/dev/null || echo "")
          if [ -n "$API_URL" ]; then
            echo "api_url=$API_URL" >> $GITHUB_OUTPUT
            echo "üöÄ API deployed at: $API_URL"
          else
            exit 1
          fi
        fi

    - name: Get Cognito outputs
      id: get-cognito
      run: |
        cd infra/terraform
        # Verificar se os outputs do Cognito existem
        if terraform output -json | jq -e '.cognito_user_pool_id' > /dev/null 2>&1; then
          COGNITO_USER_POOL_ID=$(terraform output -raw cognito_user_pool_id)
          COGNITO_APP_CLIENT_ID=$(terraform output -raw cognito_app_client_id)
          COGNITO_JWKS_URL=$(terraform output -raw cognito_jwks_url)
          echo "cognito_user_pool_id=$COGNITO_USER_POOL_ID" >> $GITHUB_OUTPUT
          echo "cognito_app_client_id=$COGNITO_APP_CLIENT_ID" >> $GITHUB_OUTPUT
          echo "cognito_jwks_url=$COGNITO_JWKS_URL" >> $GITHUB_OUTPUT
          echo "üîê Cognito User Pool ID: $COGNITO_USER_POOL_ID"
          echo "üîê Cognito App Client ID: $COGNITO_APP_CLIENT_ID"
        else
          echo "‚ùå Cognito outputs not found in Terraform state"
          echo "Available outputs:"
          terraform output
          echo "Trying to get Cognito outputs without jq..."
          # Fallback sem jq
          COGNITO_USER_POOL_ID=$(terraform output -raw cognito_user_pool_id 2>/dev/null || echo "")
          COGNITO_APP_CLIENT_ID=$(terraform output -raw cognito_app_client_id 2>/dev/null || echo "")
          COGNITO_JWKS_URL=$(terraform output -raw cognito_jwks_url 2>/dev/null || echo "")
          if [ -n "$COGNITO_USER_POOL_ID" ] && [ -n "$COGNITO_APP_CLIENT_ID" ] && [ -n "$COGNITO_JWKS_URL" ]; then
            echo "cognito_user_pool_id=$COGNITO_USER_POOL_ID" >> $GITHUB_OUTPUT
            echo "cognito_app_client_id=$COGNITO_APP_CLIENT_ID" >> $GITHUB_OUTPUT
            echo "cognito_jwks_url=$COGNITO_JWKS_URL" >> $GITHUB_OUTPUT
            echo "üîê Cognito User Pool ID: $COGNITO_USER_POOL_ID"
            echo "üîê Cognito App Client ID: $COGNITO_APP_CLIENT_ID"
          else
            exit 1
          fi
        fi

    - name: Comment PR with deployment info
      if: github.event_name == 'pull_request' && github.event.action != 'closed'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## ‚úÖ Build Successful
          
          O build foi executado com sucesso! 
          
          ### Pr√≥ximos passos:
          - ‚úÖ Build conclu√≠do
          - ‚è≥ Deploy ser√° executado **apenas** ap√≥s merge para main
          - üöÄ Lambda ser√° atualizado automaticamente
          
          ### Endpoints que estar√£o dispon√≠veis ap√≥s deploy:
          - \`POST /autenticacaoAdmin\` - Autentica√ß√£o Admin
          - \`POST /api/customer/identify\` - Identificar Customer
          - \`POST /api/customer/register\` - Registrar Customer
          - \`POST /api/customer/anonymous\` - Registrar Customer An√¥nimo
          - \`GET /swagger\` - Documenta√ß√£o Swagger
          
          **Nota:** O deploy s√≥ acontece quando o PR √© mergeado para main, evitando execu√ß√µes duplicadas.
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
