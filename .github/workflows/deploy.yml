name: Deploy to AWS

on:
  push:
    branches: [ main ]
    paths:
      - 'infra/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infra/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
        type: string

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.7.0

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore ./src/FiapFastFoodAutenticacao/FiapFastFoodAutenticacao.csproj

    - name: Build
      run: dotnet build ./src/FiapFastFoodAutenticacao/FiapFastFoodAutenticacao.csproj --configuration Release --no-restore

    - name: Publish
      run: dotnet publish ./src/FiapFastFoodAutenticacao/FiapFastFoodAutenticacao.csproj --configuration Release --output ./publish --no-build -p:PublishReadyToRun=false

    - name: Create deployment package
      run: |
        cd publish
        zip -r ../package.zip .
        cd ..

    - name: Upload package
      uses: actions/upload-artifact@v4
      with:
        name: lambda-package
        path: package.zip

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Download package
      uses: actions/download-artifact@v4
      with:
        name: lambda-package
        path: .

    - name: Verify AWS secrets
      run: |
        echo "Checking AWS secrets..."
        echo "AWS_ACCESS_KEY_ID length: ${#AWS_ACCESS_KEY_ID}"
        echo "AWS_SECRET_ACCESS_KEY length: ${#AWS_SECRET_ACCESS_KEY}"
        echo "AWS_SESSION_TOKEN length: ${#AWS_SESSION_TOKEN}"
        
        if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
          echo "‚ùå AWS_ACCESS_KEY_ID is empty"
          exit 1
        fi
        if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
          echo "‚ùå AWS_SECRET_ACCESS_KEY is empty"
          exit 1
        fi
        if [ -z "${{ secrets.AWS_SESSION_TOKEN }}" ]; then
          echo "‚ùå AWS_SESSION_TOKEN is empty"
          exit 1
        fi
        echo "‚úÖ All AWS secrets are configured"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      run: |
        cd infra/terraform
        terraform init

    - name: Check if Lambda function exists
      run: |
        cd infra/terraform
        if aws lambda get-function --function-name FastFoodAutenticacao >/dev/null 2>&1; then
          echo "Lambda function exists, will skip creation"
          echo "LAMBDA_EXISTS=true" >> $GITHUB_ENV
        else
          echo "Lambda function does not exist, will create"
          echo "LAMBDA_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: Terraform Plan
      run: |
        cd infra/terraform
        terraform plan \
          -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
          -var="jwt_issuer=${{ secrets.JWT_ISSUER }}" \
          -var="jwt_audience=${{ secrets.JWT_AUDIENCE }}" \
          -var="aws_region=${{ vars.AWS_REGION }}" \
          -var="admin_password_permanent=${{ secrets.TF_VAR_admin_password_permanent }}" \
          -var="create_lambda=${{ env.LAMBDA_EXISTS == 'false' }}" \
          -var="shared_sg_name=${{ vars.SHARED_SG_NAME || 'eks-shared-to-rds' }}"

    - name: Terraform Apply
      run: |
        cd infra/terraform
        terraform apply -auto-approve \
          -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
          -var="jwt_issuer=${{ secrets.JWT_ISSUER }}" \
          -var="jwt_audience=${{ secrets.JWT_AUDIENCE }}" \
          -var="aws_region=${{ vars.AWS_REGION }}" \
          -var="admin_password_permanent=${{ secrets.TF_VAR_admin_password_permanent }}" \
          -var="create_lambda=${{ env.LAMBDA_EXISTS == 'false' }}" \
          -var="shared_sg_name=${{ vars.SHARED_SG_NAME || 'eks-shared-to-rds' }}"

    - name: Get API Gateway URL
      id: get-url
      run: |
        cd infra/terraform
        API_URL=$(terraform output -raw api_gateway_url)
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT
        echo "üöÄ API deployed at: $API_URL"

    - name: Get Cognito outputs
      id: get-cognito
      run: |
        cd infra/terraform
        COGNITO_USER_POOL_ID=$(terraform output -raw cognito_user_pool_id)
        COGNITO_APP_CLIENT_ID=$(terraform output -raw cognito_app_client_id)
        COGNITO_JWKS_URL=$(terraform output -raw cognito_jwks_url)
        echo "cognito_user_pool_id=$COGNITO_USER_POOL_ID" >> $GITHUB_OUTPUT
        echo "cognito_app_client_id=$COGNITO_APP_CLIENT_ID" >> $GITHUB_OUTPUT
        echo "cognito_jwks_url=$COGNITO_JWKS_URL" >> $GITHUB_OUTPUT
        echo "üîê Cognito User Pool ID: $COGNITO_USER_POOL_ID"
        echo "üîê Cognito App Client ID: $COGNITO_APP_CLIENT_ID"

    - name: Comment PR with deployment info
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## ‚úÖ Build Successful
          
          O build foi executado com sucesso! 
          
          ### Pr√≥ximos passos:
          - ‚úÖ Build conclu√≠do
          - ‚è≥ Deploy ser√° executado ap√≥s merge para main
          - üöÄ Lambda ser√° atualizado automaticamente
          
          ### Endpoints que estar√£o dispon√≠veis ap√≥s deploy:
          - \`POST /autenticacaoAdmin\` - Autentica√ß√£o Admin
          - \`POST /api/customer/identify\` - Identificar Customer
          - \`POST /api/customer/register\` - Registrar Customer
          - \`POST /api/customer/anonymous\` - Registrar Customer An√¥nimo
          - \`GET /swagger\` - Documenta√ß√£o Swagger
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
